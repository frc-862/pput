name = 'average bot'

execfile("/drive/MyDrive/FRCSim/gameSim/import.py")


alliance ="blue"

attribs = {
#robot Attrubutes 50 : avg
'driverSpeedSkill' : 50,
'driverPercisionSkill' : 50,
'robotSpeed' : 50,
'robotDexterity' : 50,
'robotReliblity' : 50,
'robotWeight' : 50,
'collector' : 50,
'climber' : 50,
'indexer' : 50,
'shooter' : 50,
'programming' : 50,
'vision' : 50,
'stratagy' : 50,
'crowdedness' : 40,
'defence' : 50,
'riskiness' : 50
}

bot = robot('bottest/rechargebot.def', attribs)

# Start in first state in file (waitForTele)

forceStateAtTime('waitForTele', 15.5)
forceStateAtTime('lineUp', 120)
forceStateAtTime('report', 150)

shoot:
  True:
    if ballsHeld > 0:
      sleep(bot.timeToShootHigh())
      ballsHeld -= 1
      if odds(bot.oddsShootHigh()):
        ballsScored += 1
        if odds(bot.oddsInner()):
          if auto:
            points +=6
            score[alliance] += 6
          else:
            points +=3
            score[alliance] += 3
        else:
          if auto:
            points +=4
            score[alliance] += 4
          else:
            points +=2
            score[alliance] += 2
      if ballsHeld <= 0 and attemptCollect<=0:
        newState('driveToCollectAuto')
      elif attemptCollect>0 and ballsHeld <= 0 and auto:
        newState('waitForTele')
      elif ballsHeld <= 0:
        cycle += 1
        newState('driveToCollect')
    else:
      newState('driveToCollect')

driveToCollectAuto:
  True:
    if odds(100.0 - bot.oddsBreaking()):
      points += 5
      score[alliance] += 5
      sleep(bot.timeToDriveToCollectAuto6())
      newState('collectAuto')
    else:
      newState('waitForTele')

collectAuto:
  True:
    if odds(bot.oddsCollectAuto()):
      ballsHeld += 1
    attemptCollect+=1
    if attemptCollect == 3:
      newState('driveToShootAuto')

driveToShootAuto:
  True:
    sleepRange(.2, 1, 0.2)
    sleep(bot.timeToDriveToShootAuto6())
    newState('aimAuto')

aimAuto:
  True:
    sleep(bot.timeToAimHigh())
    if(bot.oddsAimHigh()):
      newState('shoot') 

waitForTele:
  clock > 15:
    newState('shoot')
    auto = False
    oddsToCollect = 90

driveToCollect:
  True:
    sleepRange(0.1, 8, 0.75)
    newState('collect')

collect:
  True:
    sleepRange(0.1, 1, 0.25)
    if odds(oddsToCollect):
      ballsHeld += 1
    if ballsHeld == 5:
      newState('driveToShoot')

driveToShoot:
  True:
    sleepRange(0.1, 8, 0.75)
    newState('aim')

aim:
  True:
    sleepRange(0.1, 2.5, 1)
    newState('shoot')

lineUp:
  not broken:
    sleepRange(5.5, 7, 1.5)
    if odds(oddsOfBreakingLineUp):
      broken = True
    elif odds(climbOdds):
      newState('lift')
  # Failed to lineup
  True:
    newState('waitForEnd')

lift:
  not broken:
    sleepRange(2, 4.5, 1.5)
    if odds(oddsOfBreakingLift):
      broken = True
    elif odds(climbOdds):
        if odds(levelOdds):
          points += 40
        else:
          points += 25
        newState('waitForEnd')
  # Failed to lineup
  True:
    newState('waitForEnd')

waitForEnd:

report:
  True:
    totalTime = clock - startTime
    statistics[name] = {
      'total_points': points,
      'totalTime': totalTime,
      'pput': points / totalTime,
      'Balls Scored': ballsScored,
      'cycle': cycle
    }
    newState('stop')

stop: